server:
  port: 8080
aws:
  ses:
    access-key: ${SES_ACCESS}
    secret-key: ${SES_SECRET}
    region: ap-northeast-2
spring:
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            scope: account_email, profile_nickname
            redirect-uri: "http://localhost:8080/login/oauth2/code/kakao"
            client-name: Kakao
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  main:
    allow-bean-definition-overriding: true
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://${DB_HOST}:3306/todaktodak
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MariaDBDialect
    generate-ddl: true
    hibernate:
      ddl-auto: update
    show-sql: true

  servlet:
    multipart:
      maxFileSize: 5120MB # 최대 5GB
      maxRequestSize: 5120MB # 최대 5GB

    # Email settings
  mail:
    host: ${MAIL_HOST}
    port: 587
    username: ${MAIL_USER}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        transport:
          protocol: smtp
        smtp:
          auth: true
          starttls:
            enable: true
        debug: true

  redis:
    host: ${REDIS_HOST}
    port: 6379
    #password: 1234
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP}
    consumer:
      session:
        timeout:
          ms: 30000
      request:
        timeout:
          ms: 30000
      properties:
        connections.max.idle.ms: 60000
      auto-offset-reset: earliest # 가장 처음으로 사용 가능한 메시지부터 읽기 시작
  application:
    name: reservation-service

jwt:
  secret: ${JWT_SECRET}
  secretKeyRT: ${JWT_SECRET_RT}
  expirationRT: 86400000
  expiration: 86400000  # 1 day in milliseconds

# aws s3 설정
cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ap-northeast-2
    s3:
      bucket: todak-file
eureka:
  client:
    serviceUrl:
      #      eureka의 member-service(서비스)로서 등록됨을 지정하겠다.
      defaultZone: http://localhost:8761/eureka/
iamport:
  api_key: ${IAM_API}
  api_secret: ${IAM_API_SECRET}

fcm:
  secret-file: todak-1f8d0-firebase-adminsdk-tbqa8-b7c41789c9.json
  secret-file-content: ${FIRE_BASE_SDK}
  # fcm:
  # secret-file: "/firebase-credentials/todak-1f8d0-firebase-adminsdk-tbqa8-b7c41789c9.json"

springdoc:
  enable-native-support: true
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    config-url: /reservation-service/v3/api-docs/swagger-config
    urls:
      - url: /reservation-service/v3/api-docs
        name: reservation-service